// Type definitions for Hap
// Definitions by: Hap <https://www.quickapp.cn/>
/**
 * 蓝牙接口
 * 接口声明: {"name": "system.bluetooth"}
 */
export default class bluetooth {
  /**
   * 获取系统当前支持的定位类型
   * @param obj
   * @property operateAdapter 是否打开系统蓝牙开关，默认false
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 执行结束后的回调
   */
  static openAdapter(obj: { operateAdapter?: Boolean, success: Function, fail?: Function, complete?: Function }): void

  /**
   * 初始化蓝牙模块
   * @param obj
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 执行结束后的回调
   */
  static open(obj: { success: Function, fail?: Function, complete?: Function }): void

  /**
   * 关闭蓝牙
   * @param obj
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 执行结束后的回调
  */
  static close(obj: { success: Function, fail?: Function, complete?: Function }): void

  /*
   *监听蓝牙适配器状态
   */
  static onstatechange(): void

  /**
   * 监听寻找到新设备的事件
   */
  static ondevicefound(): void

  /**
   * 获取蓝牙适配器状态
   * @param obj
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 执行结束后的回调
   */
  static getState(): void

  /**
   * 监听蓝牙设备扫描结果
   */
  static onlescanresult(): void

  /**
   * 停止扫描
   * @param obj
    @property success 成功回调
   * @property fail 失败回调
   * @property complete 执行结束后的回调
   */
  static stopLEScan(obj: { success: Function, fail?: Function, complete?: Function }): void

  /**
   * 扫描蓝牙设备
   * @param obj
   * @property serviceUuids 扫描广播中指定uuid service的设备
   * @property timeout 设置扫描总时间(毫秒),如不设置默认15秒
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 执行结束后的回调
   */
  static startLEScan(serviceUuids?: Array<String>, timeout?: Number, success?: Function, fail?: Function, complete?: Function): void

  /**
   * 停止扫描蓝牙设备
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 执行结束后的回调
   */
  static stopDevicesDiscovery(obj: { success?: Function, fail?: Function, complete?: Function }): void;

  /**
   * 开始扫描蓝牙设备
   * @param obj
   * @property service  要搜索的主 service 的 uuid 列表。某些蓝牙设备会广播自己的主 service 的 uuid。如果设置此参数，则只搜索广播包有对应 uuid 的主服务的蓝牙设备。建议主要通过该参数过滤掉周边不需要处理的其他蓝牙设备。
   * @property allowDuplicatesKey 默认值为 false。是否允许重复上报同一设备。如果允许重复上报，则 bluetooth.ondevicefound 方法会多次上报同一设备，但是 RSSI 值会有不同。
   * @property interval 单位毫秒，默认值为 0。上报设备的间隔。0 表示找到新设备立即上报，其他数值根据传入的间隔上报。
   * @property success 成功回调
   */
  static startDevicesDiscovery(obj: { service: Array<string>, allowDuplicatesKey: Boolean, interval: Number, success?: Function }): void;

  /**
   * 注册设备连接状态监听
   */
  static onbleconnectionstatechange(): void;

  /**
   * 连接低功耗蓝牙设备。若快应用有搜索过某个蓝牙设备，并成功建立连接，可直接传入之前搜索获取的 deviceId 直接尝试连接该设备，无需进行搜索操作。
   * @param obj
   * @property deviceId  用于区分设备的 id
   * @property timeout 超时时间，单位 ms，不填表示不会超时
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static createBLEConnection(obj: { deviceId: String, timeout: Number, success: Function, fail: Function, complete: Function }): void;

  /**
   * 断开与低功耗蓝牙设备的连接。
   * @param obj
   * @property deviceId  用于区分设备的 id
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static closeBLEConnection(obj: { deviceId: String, success: Function, fail: Function, complete: Function }): void;


  /**
   * 获取设备服务信息
   * @param obj
   * @property deviceId  deviceId
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static getBLEDeviceServices(obj: { deviceId: String, success: Function, fail: Function, complete: Function }): void

  /**
   * 获取设备特征值信息
   * @param obj
  * @property deviceId  deviceId
  * @property serviceId serviceId
  * @property success 成功回调
  * @property fail 失败回调
  * @property complete 完成回调
   */
  static getBLEDeviceCharacteristics(obj: { deviceId: String, serviceId: String, success: Function, fail: Function, complete: Function }): void

  /**
   * 向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持 write 才可以成功调用。
   * @param obj
   * @property deviceId   这里的 deviceId 需要在 getBluetoothDevices 或 onBluetoothDeviceFound接口中获取
   * @property serviceId 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
   * @property characteristicId 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取
   * @property value  这里的value是ArrayBuffer类型
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static writeBLECharacteristicValue(obj: { deviceId: String, serviceId: String, characteristicId: String, value: ArrayBuffer, success: Function, fail: Function, complete: Function }): void

  /**
   * 注册特征值改变监听
   */
  static onblecharacteristicvaluechange(): void

  /**
   * 读取设备数据
   * @param obj
   * @property deviceId   这里的 deviceId 需要在 getBluetoothDevices 或 onBluetoothDeviceFound接口中获取
   * @property serviceId 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
   * @property characteristicId 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static readBLECharacteristicValue(obj: { deviceId: String, serviceId: String, characteristicId: String, success: Function, fail: Function, complete: Function }): void;

  /**
   * 监听设备数据变化
   * @param obj
   * @property state   启用 notify 功能,为true则开启通知
   * @property 蓝牙设备 id
   * @property serviceId 蓝牙特征值对应服务的 uuid
   * @property characteristicId 蓝牙特征值的 uuid
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static notifyBLECharacteristicValueChange(obj: { state: Boolean, deviceId: String, serviceId: String, characteristicId: String, success: Function, fail: Function, complete: Function }): void

  /**
   * adapter状态改变
   */
  static onadapterstatechange(): void

  /**
   * 关闭蓝牙模块。调用该方法将断开所有已建立的连接并释放系统资源。建议在使用蓝牙流程后，与 bluetooth.openAdapter 成对调用。
   * @param obj
   * @property operateAdapter 是否关闭系统蓝牙开关，默认false，此操作会直接关闭系统蓝牙，为了不影响用户其他蓝牙设备的体验，不建议设置为true
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static closeAdapter(obj: { operateAdapter?: Boolean, success?: Function, fail?: Function, complete?: Function }): void


  /**
   * 连接蓝牙设备。若之前已有搜索过某个蓝牙设备,并成功建立链接,可直接传入之前搜索获取的address直接尝试连接该设备,无需进行搜索操作。
   * @param obj
   * @property address 设备MAC地址
   * @property timeout 连接超时后失败
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static connectLE(obj: { address: String, timeout: Number, success: Function, fail: Function, complete: Function }): void

  /**
   * 断开连接.
   * @param obj
   * @property address 设备MAC地址
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static connectLE(obj: { address: String, success: Function, fail: Function, complete: Function }): void

  /**
   * 获取蓝牙设备所有service.
   * @param obj
   * @property address 设备MAC地址
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static getServices(obj: { address: String, success: Function, fail: Function, complete: Function }): void

  /**
   * 获取蓝牙设备所有service.
   * @param obj
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static getAdapterState(obj: { success: Function, fail: Function, complete: Function }): void

  /**
   * 获取在蓝牙模块生效期间所有已发现的蓝牙设备。包括已经和本机处于连接状态的设备。
   * @param obj
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static getDevices(obj: { success?: Function, fail?: Function, complete?: Function }): void

  /**
   * 根据 uuid 获取处于已连接状态的设备。
   * @param obj
   * @property services 蓝牙设备主 service 的 uuid 列表
   * @property success 成功回调
   * @property fail 失败回调
   * @property complete 完成回调
   */
  static getConnectedDevices(obj: { services: Array<String>, success?: Function, fail?: Function, complete?: Function }): void
}
